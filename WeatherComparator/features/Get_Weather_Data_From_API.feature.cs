// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WeatherComparator.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Get_Weather_Data_From_API", new string[] {
            "regression"}, Description="\tIn order to avoid failures\r\n\tAs an automation tester\r\n\tI want to verify the API " +
        "Response for the Get Weather API and build weather Object 2 for comparison", SourceFile="features\\Get_Weather_Data_From_API.feature", SourceLine=1)]
    public partial class Get_Weather_Data_From_APIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Get_Weather_Data_From_API.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Get_Weather_Data_From_API", "\tIn order to avoid failures\r\n\tAs an automation tester\r\n\tI want to verify the API " +
                    "Response for the Get Weather API and build weather Object 2 for comparison", ProgrammingLanguage.CSharp, new string[] {
                        "regression"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
 testRunner.Given("Load the request data for Get Weather API from json file \'GetWeatherAPIRequest.js" +
                    "on\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity(string description, string requestType, string requestParam, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "api",
                    "phase_2",
                    "tc_001"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate if Get Weather API returns valid response for the corresponding city", null, @__tags);
#line 11
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 12
testRunner.Given(string.Format("Load scenario outline description \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
testRunner.Given("I set Get Weather service API endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
testRunner.When(string.Format("I set request Header for the API Type - \'{0}\' with request Paramater \'{1}\'", requestType, requestParam), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
testRunner.And("I send Get HTTP Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
testRunner.Then("I validate the HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate if Get Weather API returns valid response for the corresponding city, AP" +
            "IByCityNameCoimbatore", new string[] {
                "api",
                "phase_2",
                "tc_001"}, SourceLine=18)]
        public virtual void ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity_APIByCityNameCoimbatore()
        {
#line 11
this.ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity("APIByCityNameCoimbatore", "ByCityName", "Coimbatore", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate if Get Weather API returns valid response for the corresponding city, AP" +
            "IByCityId", new string[] {
                "api",
                "phase_2",
                "tc_001"}, SourceLine=18)]
        public virtual void ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity_APIByCityId()
        {
#line 11
this.ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity("APIByCityId", "ByCityId", "1279233", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate if Get Weather API returns valid response for the corresponding city, AP" +
            "IByGeographicCoordinates", new string[] {
                "api",
                "phase_2",
                "tc_001"}, SourceLine=18)]
        public virtual void ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity_APIByGeographicCoordinates()
        {
#line 11
this.ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity("APIByGeographicCoordinates", "ByGeographicCoordinates", "76.97, 11", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate if Get Weather API returns valid response for the corresponding city, AP" +
            "IByZipCode", new string[] {
                "api",
                "phase_2",
                "tc_001"}, SourceLine=18)]
        public virtual void ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity_APIByZipCode()
        {
#line 11
this.ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity("APIByZipCode", "ByZipCode", "641001,IN", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate if Get Weather API returns valid response for the corresponding city, AP" +
            "IByCityNameAhmedabad", new string[] {
                "api",
                "phase_2",
                "tc_001"}, SourceLine=18)]
        public virtual void ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity_APIByCityNameAhmedabad()
        {
#line 11
this.ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity("APIByCityNameAhmedabad", "ByCityName", "Ahmedabad", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
