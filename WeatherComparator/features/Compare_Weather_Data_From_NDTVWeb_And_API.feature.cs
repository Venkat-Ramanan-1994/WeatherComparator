// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WeatherComparator.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Compare_Weather_Data_From_NDTVWeb_And_API", new string[] {
            "regression",
            "comparison"}, Description="\tIn order to avoid failures\r\n\tAs an automation tester\r\n\tI want to compare the tem" +
        "perature data between NDTV web and API along with a variance", SourceFile="features\\Compare_Weather_Data_From_NDTVWeb_And_API.feature", SourceLine=1)]
    public partial class Compare_Weather_Data_From_NDTVWeb_And_APIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Compare_Weather_Data_From_NDTVWeb_And_API.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Compare_Weather_Data_From_NDTVWeb_And_API", "\tIn order to avoid failures\r\n\tAs an automation tester\r\n\tI want to compare the tem" +
                    "perature data between NDTV web and API along with a variance", ProgrammingLanguage.CSharp, new string[] {
                        "regression",
                        "comparison"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
 testRunner.Given("Load the request data for Get Weather API from json file \'GetWeatherAPIRequest.js" +
                    "on\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void ValidateIfCorrespondingCityIsAvailableOnTheMapValidateTheWeatherDetailsOnClickingTheCity(string description, string city, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "web",
                    "phase_1",
                    "tc_002"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate if corresponding city is available on the map & validate the weather det" +
                    "ails on clicking the city", null, @__tags);
#line 11
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 12
testRunner.Given(string.Format("Load scenario outline description \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
testRunner.Given("I open the website\'s home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
testRunner.When("I navigate to the weather section of the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
testRunner.And(string.Format("I select a city: \'{0}\' using Pin Your City from the left", city), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
testRunner.Then(string.Format("I should see that corresponding city \'{0}\' is available on the map with temperatu" +
                        "re information", city), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
testRunner.When(string.Format("I select the city \'{0}\' on the map", city), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
testRunner.Then(string.Format("I should see the corresponding city\'s \'{0}\' weather details", city), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate if corresponding city is available on the map & validate the weather det" +
            "ails on clicking the city, NDTVWeatherCoimbatore", new string[] {
                "web",
                "phase_1",
                "tc_002"}, SourceLine=20)]
        public virtual void ValidateIfCorrespondingCityIsAvailableOnTheMapValidateTheWeatherDetailsOnClickingTheCity_NDTVWeatherCoimbatore()
        {
#line 11
this.ValidateIfCorrespondingCityIsAvailableOnTheMapValidateTheWeatherDetailsOnClickingTheCity("NDTVWeatherCoimbatore", "Ahmedabad", ((string[])(null)));
#line hidden
        }
        
        public virtual void ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity(string description, string requestType, string requestParam, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "api",
                    "phase_2",
                    "tc_002"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate if Get Weather API returns valid response for the corresponding city", null, @__tags);
#line 24
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 25
testRunner.Given(string.Format("Load scenario outline description \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
testRunner.Given("I set Get Weather service API endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
testRunner.When(string.Format("I set request Header for the API Type - \'{0}\' with request Paramater \'{1}\'", requestType, requestParam), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
testRunner.And("I send Get HTTP Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
testRunner.Then("I validate the HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate if Get Weather API returns valid response for the corresponding city, AP" +
            "IByCityNameAhmedabad", new string[] {
                "api",
                "phase_2",
                "tc_002"}, SourceLine=31)]
        public virtual void ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity_APIByCityNameAhmedabad()
        {
#line 24
this.ValidateIfGetWeatherAPIReturnsValidResponseForTheCorrespondingCity("APIByCityNameAhmedabad", "ByCityName", "Ahmedabad", ((string[])(null)));
#line hidden
        }
        
        public virtual void ValidateIfTheTemperatureFromWebAndAPILiesWithinAVarianceOf2DegreeCelsius(string description, string city, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "phase_3",
                    "tc_001"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate if the temperature from web and API lies within a variance of 2 degree c" +
                    "elsius", null, @__tags);
#line 36
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 37
testRunner.Given(string.Format("Load scenario outline description \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
testRunner.Given(string.Format("I retrieve the data from two weather objects: Object1-Web and Object2-API for the" +
                        " city \'{0}\'", city), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
testRunner.Then("I compare the temperature using a variance logic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate if the temperature from web and API lies within a variance of 2 degree c" +
            "elsius, WeatherComparisonAhmedabad", new string[] {
                "phase_3",
                "tc_001"}, SourceLine=41)]
        public virtual void ValidateIfTheTemperatureFromWebAndAPILiesWithinAVarianceOf2DegreeCelsius_WeatherComparisonAhmedabad()
        {
#line 36
this.ValidateIfTheTemperatureFromWebAndAPILiesWithinAVarianceOf2DegreeCelsius("WeatherComparisonAhmedabad", "Ahmedabad", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
